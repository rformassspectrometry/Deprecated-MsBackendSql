% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackendSqlDb-functions.R, R/MsBackendSqlDb.R
\name{MsBackendSqlDb}
\alias{MsBackendSqlDb}
\alias{class:MsBackendSqlDb}
\alias{MsBackendSqlDb-class}
\alias{backendInitialize,MsBackendSqlDb-method}
\title{SQL database based mass spectrometry data backend}
\usage{
MsBackendSqlDb()

\S4method{backendInitialize}{MsBackendSqlDb}(
  object,
  files = character(),
  data = DataFrame(),
  ...,
  dbcon,
  dbtable = "msdata"
)
}
\arguments{
\item{object}{a \code{MsBackendSqlDb} object.}

\item{files}{\code{character} with the file names from which data should
be imported. Only required if the database to which \code{dbcon}
connects does not already contain the data.}

\item{data}{For \code{backendInitialize}: \code{DataFrame} with spectrum
metadata/data from which data should be imported. This parameter
is the alternative of \code{files} parameter, only required if the
database to which \code{dbcon} connects does not already contain the
data, and the data is not from MS data files.}

\item{...}{Additional arguments.}

\item{dbcon}{a \code{DBIConnection} object to connect to the database. If
not provided, \code{backendInitialize}method will create a \code{DBIConnection}
object in the temporary directory of R.}

\item{dbtable}{\code{character(1)} the name of the database table with
the data.  Defaults to \code{dbtable = "msdata"}.}
}
\description{
The \code{MsBackendSqlDb} is an \link{MsBackend} backend that keeps all
metadata and spectra data (m/z and intensity values) in a single
on-disk database table.  This object has a very low memory
footprint because only primary keys of the database table are
stored in memory, within the object hence making it ideal for
representing very large mass spectrometry data sets on computers
with limited resources.
}
\section{Slots}{

\describe{
\item{\code{dbtable}}{A \code{character(1)} with the name of the database table
(or view) containing the data.}

\item{\code{dbcon}}{A \code{DBIConnection} with the connection to the database.}

\item{\code{modCount}}{An \code{integer()} that keeps track of each database
writing cycle which would invalidate objects pointing to the
same database. This number has to match between the database
and the object.}

\item{\code{rows}}{An \code{integer()} with the indices (primary keys) of the
data.}

\item{\code{columns}}{A \code{character()} containing the names of the columns
stored in the database.}

\item{\code{`query`}}{A \code{DBIResults} object containing SQL query against
the backend.}
}}

\section{Creating an \code{MsBackendSqlDb} instance}{


Like all \code{\link[=MsBackend]{MsBackend()}} objects, \code{MsBackendSqlDb} have to be
\emph{initialized} with the \code{backendInitialize()} method. There are three
ways to initialize a \code{MsBackendSqlDb} object by \code{backendInitialize()}
method. We can either fill the object with data from mass spectrometry
files provided with the \code{files} parameter, or we can pass a \code{DataFrame}
object with metadata and spectra data with the \code{data} parameter, or
checks if the pre-generated database contains all required data. A
connection to a database (with write access) has to be provided with
the \code{dbcon} parameter which expects a \code{DBIConnection} returned by a
call to \code{\link[=dbConnect]{dbConnect()}}. To fill the database with MS data files (usually
mzML files, but all files types supported by the \code{mzR} package are
allowed), these have to be provided with the \code{files} parameter. Or, we
can pass a \code{DataFrame} object to the database through the \code{DBIConnection}
object. This \code{DataFrame} shall contain the metadata and spectra data parsed
by other backends, or generated by by user themselves. Parameter \code{dbtable}
can be used to optionally specify the database table name that contains,
or should contain the data.
}

\section{Implementation notes}{


The \code{MsBackendSqlDb} defines the following slots which should not
be accessed or changed by the user.
}

\section{Backend functions}{


MsBackendSqlDb extend the base \code{MsBackend} class from Spectra package.
Currently, MsBackendSqlDb supports all the reading functions from \code{MsBackend}
class. Only specific functions in MsBackendSqlDb will be listed:
\itemize{
\item \code{reset} the row indices of a MsBackendSqlDb backend after filtering
and/or subsetting operations. MsBackendSqlDb backend utilizes slot \code{rows}
to mark filtering and subsetting results. The underlying SQLite data tables
won't be influenced by these operations.
}
}

\examples{

## Initialize an MsBackendSqlDb filling it with data from mzML files
library(msdata)
library(RSQLite)
con <- dbConnect(SQLite(), tempfile())
fls <- dir(system.file("sciex", package = "msdata"), full.names = TRUE,
    pattern = "mzML$")
msb <- backendInitialize(MsBackendSqlDb(), dbcon = con, files = fls)
}
\author{
Chong Tang, Johannes Rainer
}
